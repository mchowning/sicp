(define (timed-prime-test n)
  (start-prime-test n (runtime)))

; (define (start-prime-test n start-time)
;   (if (prime? n) 
;        (report-prime n (- (runtime) start-time))
;        false))

(define (start-prime-test n start-time)
  (if (fast-prime? n 3)     ; the 3 is an arbitrary number of times to do the test 
       (report-prime n (- (runtime) start-time))
       false))

(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time)
  true)

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
           (square (expmod base (/ exp 2) m))
           m))
        (else 
          (remainder
            (* base (expmod base (- exp 1) m))
            m))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n)
         (fast-prime? n (- times 1)))
        (else false)))
  
; (define (smallest-divisor n)
;   (find-divisor n 2))
; 
; (define (square x) (* x x))
; 
; (define (find-divisor n test-divisor)
;   (cond ((> (square test-divisor) n)
;          n)
;         ((divides? test-divisor n)
;          test-divisor)
;         (else (find-divisor
;                 n
;                 (+ test-divisor 1)))))
; 
; (define (divides? a b)
;   (= (remainder b a) 0))
; 
; (define (prime? n)
;   (= n (smallest-divisor n)))

; ########################################

(define (search-for-primes n)

  (define (even? n)
    (= (remainder n 2) 0))

  (define (search-for-count-primes n count)
    (if (< count 3) 
      (if (timed-prime-test n)
        (search-for-count-primes (+ n 2) (+ count 1))
        (search-for-count-primes (+ n 2) count))))
  
  (if (even? n)
    (search-for-count-primes (+ n 1) 0)
    (search-for-count-primes n 0)))
