(define (double a)
  (+ a a))

(define (halve a)
  (/ a 2)) ; kind of cheating by using /, but oh well

(define (even? a)
  (= (remainder a 2)
     0))

; The linear recursive implementation I think the problem is actually looking for

(define (mult-fast a b)
  (cond ((= b 0) 0)
        ((even? b) (mult-fast (double a)
                              (halve b)))
        (else (+ a 
                 (mult-fast a
                            (- b 1))))))
