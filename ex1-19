;;;   
;;;   Tpq(a,b) =  a <- bq + aq + ap 
;;;               b <- bp + aq
;;;   
;;;   Tp'q'(a,b) = a <- (bp + aq)q + (bq + aq + ap)q + (bq + aq + ap)p
;;;                b <- (bp + aq)p + (bq + aq + ap)q
;;;   
;;;   
;;;   Using b because it's simpler:
;;;
;;;   b <- (bp + aq)p + (bq + aq + ap)q
;;;   b <= bpp + apq + bqq + aqq + apq
;;;   b <- bpp + bqq + apq + aqq + apq
;;;   b <- b(pp + qq) + a(2qp + qq)
;;;   
;;;   p' = pp + qq
;;;   q' = 2qp + qq
;;;   
;;;   
;;;   Verifying my answer with a:
;;;
;;;   a <- (bp + aq)q + (bq + aq + ap)q + (bq + aq + ap)p
;;;   a <- bpq + aqq + bqq + aqq + apq + bpq + apq + app
;;;   a <- bpq + bqq + bpq + aqq + aqq + apq + apq + app
;;;   a <- b(2pq + qq) + aqq + aqq + apq + apq + app
;;;   a <- b(2pq + qq) + a(2pq + qq) aqq + app
;;;   a <- b(2pq + qq) + a(2pq + qq) + a(qq + pp)
;;;   
;;;   p' = pp + qq
;;;   q' = 2pq + qq
;;;   
;;;   
;;;   #########################################
;;;   

(define (fib n)
    (define (fib-iter a b p q count)
      (cond ((= count 0)
             b)
            ((even? count)
             (fib-iter a
                       b
                       (+ (* p p) (* q q))      ; p'
                       (+ (* 2 q p) (* q q))    ; q'
                       (/ count 2)))
            (else
              (fib-iter (+ (* b q)
                           (* a q)
                           (* a p))
                        (+ (* b p)
                           (* a q))
                        p
                        q
                        (- count 1)))))

  (fib-iter 1 0 0 1 n))


